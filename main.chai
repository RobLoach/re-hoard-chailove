/*
re-hoard
copyright tinglar 2017-2018
license gplv3 (gnu.org/licenses/gpl-3.0.en.html)
revision 0

title music by 0xabad1dea
gameplay music based on song by tanner helland
*/



/*parameters*/

//constants
//title screen: 64 * 16 starting from 0, 16

global FLOOR_CELL = 0
global WALL_CELL = 1
global VOID_CELL = 2
global int INITIAL_DUNGEON_SIZE = 15

//variables
global musicPlaying = false
global titlePhase = true
global intermissionPhase = false
global setupPhase = false
global normalPhase = false
global panicPhase = false
global startup = true
global int currentLevel = 0
global int previousLevel = 0
global int tries = 3
global int incrementor = (currentLevel / 2) * 2
global int currentDungeonSize = INITIAL_DUNGEON_SIZE + incrementor
global dungeon = []
global allFloorLocations = []
global opponentSetupFloorLocations = []
global safeFloorLocations = []
global dragonLocation = []
global treasureLocation = []
global gotTreasure = false
global isFireballThere = false
global int fearCount = 0
global int arrowCount = 0
global int surpriseCount = 0
global int dynamiteCount = 0
global int highestRound = 0



//push_back()
//pop_back()

/* data structures */




/* algorithms */
def dungeon_structure()
{
	for (var vertical = 0; vertical = currentDungeonSize - 1; ++vertical)
	{
		if (vertical == 0 || vertical == currentDungeonSize - 1)
		{
			for (var horizontal = 0; horizontal = currentDungeonSize - 1; ++horizontal)
			{
				dungeon[vertical][horizontal] = WALL_CELL
			}
		}
		else
		{
			for (var horizontal = 0; horizontal = currentDungeonSize - 1; ++horizontal)
			{
				if (horizontal == 0 || horizontal == currentDungeonSize - 1)
				{
					dungeon[vertical][horizontal] = WALL_CELL
				}
				else
				{
					dungeon[vertical][horizontal] = VOID_CELL
				}
			}
		}
	}
}






/* basic ChaiLove stuff */

def load() {

}

def draw() {

}

def update(dt) {

}