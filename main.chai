/*
re-hoard
copyright tinglar 2017-2018
license gplv3 (gnu.org/licenses/gpl-3.0.en.html)
revision 0

title music by 0xabad1dea
gameplay music based on song by tanner helland
*/



/*parameters*/

//constants
//title screen: 64 * 16 starting from 0, 16

global FLOOR_CELL = 0
global WALL_CELL = 1
global VOID_CELL = 2
global int INITIAL_DUNGEON_SIZE = 15

//variables
global musicPlaying = false
global titlePhase = true
global intermissionPhase = false
global setupPhase = false
global normalPhase = false
global panicPhase = false
global startup = true
global int currentLevel = 0
global int previousLevel = 0
global int tries = 3
global int incrementor = (currentLevel / 2) * 2
global int currentDungeonSize = INITIAL_DUNGEON_SIZE + incrementor
global dungeon = []
global allFloorLocations = []
global opponentSetupFloorLocations = []
global safeFloorLocations = []
global dragonLocation = []
global treasureLocation = []
global gotTreasure = false
global isFireballThere = false
global int fearCount = 0
global int arrowCount = 0
global int surpriseCount = 0
global int dynamiteCount = 0
global int highestRound = 0



//push_back()
//pop_back()

/* data structures */




/* algorithms */
def dungeon_structure()
{
	for (var vertical = 0; vertical = currentDungeonSize - 1; ++vertical)
	{
		if (vertical == 0 || vertical == currentDungeonSize - 1)
		{
			for (var horizontal = 0; horizontal = currentDungeonSize - 1; ++horizontal)
			{
				dungeon[vertical][horizontal] = WALL_CELL
			}
		}
		else
		{
			for (var horizontal = 0; horizontal = currentDungeonSize - 1; ++horizontal)
			{
				if (horizontal == 0 || horizontal == currentDungeonSize - 1)
				{
					dungeon[vertical][horizontal] = WALL_CELL
				}
				else
				{
					dungeon[vertical][horizontal] = VOID_CELL
				}
			}
		}
	}
}


def recursive_backtracker()
{
	var int roll
	var currentCell = []
	var previousCell = []
	var visitedCells = []
	var cellChoices = []

	currentCell = [1,1]
	dungeon[1][1] = FLOOR_CELL
	visitedCells.push_back(currentCell)
	
	previousCell = [1,1]
	roll = love.math.random(0, 1)
	//How do you make sure that this picks between integers?
	if (roll == 0)
	{
		currentCell = [1,2]
		dungeon[1][2] = FLOOR_CELL
	}
	else
	{
		currentCell = [2,1]
		dungeon[2][1] = FLOOR_CELL
	}
	visitedCells.push_back(currentCell)

	while ( !visitedCells.empty() )
	{
		//Maybe you should collect the values of the current cell here?
		if (dungeon[ currentCell[0] - 1 ][ currentcell[1] ] == VOID_CELL)
		{
			cellChoices.push_back( [ currentCell[0] - 1, currentcell[1] ] )
		}
		if (dungeon[ currentCell[0] + 1 ][ currentcell[1] ] == VOID_CELL)
		{
			cellChoices.push_back( [ currentCell[0] + 1, currentcell[1] ] )
		}
		if (dungeon[ currentCell[0] ][ currentcell[1] - 1 ] == VOID_CELL)
		{
			cellChoices.push_back( [ currentCell[0], currentcell[1] - 1 ] )
		}
		if (dungeon[ currentCell[0] ][ currentcell[1] + 1 ] == VOID_CELL)
		{
			cellChoices.push_back( [ currentCell[0], currentcell[1] + 1 ] )
		}
		
		if ( cellChoices.empty() )
		{
			currentCell = visitedCells.pop_back()
		}
		else
		{
			previousCell = currentCell
			roll = love.math.random( 0, cellChoices.size() )
			currentCell = cellChoices[roll]
			dungeon[ currentCell[0] ][ currentCell[1] ] = FLOOR_CELL
			if ( currentCell[0] != previousCell[0] ) //If I moved vertically...
			{
				if (dungeon[ currentCell[0] ][ currentCell[1] - 1 ] == VOID_CELL)
				{
					dungeon[ currentCell[0] ][ currentCell[1] - 1 ] = WALL_CELL
				}
				if (dungeon[ currentCell[0] ][ currentCell[1] + 1 ] == VOID_CELL)
				{
					dungeon[ currentCell[0] ][ currentCell[1] + 1 ] = WALL_CELL
				}
			}
			else
			{

				if (dungeon[ currentCell[0] - 1 ][ currentCell[1] ] == VOID_CELL)
				{
					dungeon[ currentCell[0] - 1 ][ currentCell[1] ] = WALL_CELL
				}
				if (dungeon[ currentCell[0] + 1 ][ currentCell[1] ] == VOID_CELL)
				{
					dungeon[ currentCell[0] + 1][ currentCell[1] ] = WALL_CELL
				}
			}
			cellChoices = [] //Resets the current cell choices
		}
	}
}


def breadthFirst(startCell, endCell)
{
	var frontier = [startCell]
	var checkingCell = []
	var visitedCells = []
	

	while ( !frontier.empty() )
	{
		checkingCell = frontier.pop_back()

		if ( checkingCell == endCell )
		{
			return visitedCells
		}

		if ( dungeon[ checkingCell[0] - 1 ][ checkingCell[1] ] == FLOOR_CELL 
			&& alreadyChecked( checkingCell[0] - 1, checkingCell[1] ) == false )
		{
			frontier.push_back([ checkingCell[0] - 1 ][ checkingCell[1] ])
			visitedCells.push_back([ checkingCell[0] - 1 ][ checkingCell[1] ])
		}
		if ( dungeon[ checkingCell[0] + 0 ][ checkingCell[1] ] == FLOOR_CELL 
			&& alreadyChecked( checkingCell[0] + 0, checkingCell[1] ) == false )
		{
			frontier.push_back([ checkingCell[0] + 0 ][ checkingCell[1] ])
			visitedCells.push_back([ checkingCell[0] + 0 ][ checkingCell[1] ])
		}
		if ( dungeon[ checkingCell[0] ][ checkingCell[1] - 1 ] == FLOOR_CELL 
			&& alreadyChecked( checkingCell[0], checkingCell[1] - 1 ) == false )
		{
			frontier.push_back([ checkingCell[0] ][ checkingCell[1] - 1 ])
			visitedCells.push_back([ checkingCell[0] ][ checkingCell[1] - 1 ])
		}
		if ( dungeon[ checkingCell[0] ][ checkingCell[1] + 1 ] == FLOOR_CELL 
			&& alreadyChecked( checkingCell[0], checkingCell[1] + 1 ) == false )
		{
			frontier.push_back([ checkingCell[0] ][ checkingCell[1] + 1 ])
			visitedCells.push_back([ checkingCell[0] ][ checkingCell[1] + 1 ])
		}
	}

	return visitedCells
}


def alreadyChecked( vertical, horizontal )
{
	for (frontier)
	{
		if ( [vertical, horizontal] )
		{
			return true
		}
	}
	return false
}



/* basic ChaiLove stuff */

def load()
{

}

def draw()
{

}

def update(dt)
{

}