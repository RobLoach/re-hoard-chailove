/*
Re-Hoard
Copyright Tinglar 2017-2018
License gplv3 (gnu.org/licenses/gpl-3.0.en.html)
Revision 0

Title music by 0xabad1dea
Gameplay music based on song by Tanner Helland
*/


/*parameters*/

//internal constants
global SQUARE_SIZE = 8
global FLOOR_CELL = false
global WALL_CELL = true
global WALL_STRENGTH = 0.8
global INITIAL_DUNGEON_SIZE = 15
global VERTICAL_DIMENSION = 0
global HORIZONTAL_DIMENSION = 1
global TILE_VERTICAL = currentTile[VERTICAL_DIMENSION]
global TILE_HORIZONTAL = currentTile[HORIZONTAL_DIMENSION]
global POSITION_VERTICAL = position[VERTICAL_DIMENSION]
global POSITION_HORIZONTAL = position[HORIZONTAL_DIMENSION]
global CORNERS = [ 
	[0, -2],	//north
	[2, 0],		//east
	[-2, 0],	//west
	[0, 2]		//south
]
global DYNAMITE_EXPLOSION_POINT = 0
global DYNAMITE_ERASURE_POINT = -4
global THIS_OPPONENT = opponentList[opponent]
global THIS_HAZARD = hazardList[hazard]

//asset constants
global SPRITE_FLAG_ENG = love.graphics.newImage("sprites/flag_unitedstatesofamerica.png")
global SPRITE_FLAG_SPA = love.graphics.newImage("sprites/flag_puertorico.png")
global SPRITE_FLAG_EPO = love.graphics.newImage("sprites/flag_esperanto.png")
global SPRITE_SELECT = love.graphics.newImage("sprites/select.png")

global SPRITE_WALL = love.graphics.newImage("sprites/wall.png")
global SPRITE_FLOOR = love.graphics.newImage("sprites/floor.png")
global SPRITE_DOOR_CLOSED = love.graphics.newImage("sprites/door_closed.png")
global SPRITE_DOOR_OPEN = love.graphics.newImage("sprites/door_open.png")
global SPRITE_TREASURE_CLOSED = love.graphics.newImage("sprites/treasure_closed.png")
global SPRITE_TREASURE_OPEN = love.graphics.newImage("sprites/treasure_open.png")

global SPRITE_DRAGON_FLY1_LEFT = love.graphics.newImage("sprites/dragon_fly_left_1.png")
global SPRITE_DRAGON_FLY2_LEFT = love.graphics.newImage("sprites/dragon_fly_left_2.png")
global SPRITE_DRAGON_FLY1_RIGHT = love.graphics.newImage("sprites/dragon_fly_right_1.png")
global SPRITE_DRAGON_FLY2_RIGHT = love.graphics.newImage("sprites/dragon_fly_right_2.png")
global SPRITE_DRAGON_FLY1_UP = love.graphics.newImage("sprites/dragon_fly_up_1.png")
global SPRITE_DRAGON_FLY2_UP = love.graphics.newImage("sprites/dragon_fly_up_2.png")
global SPRITE_DRAGON_FLY1_DOWN = love.graphics.newImage("sprites/dragon_fly_down_1.png")
global SPRITE_DRAGON_FLY2_DOWN = love.graphics.newImage("sprites/dragon_fly_down_2.png")
global SPRITE_DRAGON_FIRE_LEFT = love.graphics.newImage("sprites/dragon_fire_left.png")
global SPRITE_DRAGON_FIRE_RIGHT = love.graphics.newImage("sprites/dragon_fire_right.png")
global SPRITE_DRAGON_FIRE_UP = love.graphics.newImage("sprites/dragon_fire_up.png")
global SPRITE_DRAGON_FIRE_DOWN = love.graphics.newImage("sprites/dragon_fire_down.png")
global SPRITE_DRAGON_EMBARRASSED_LEFT = love.graphics.newImage("sprites/dragon_embarrassed_left.png")
global SPRITE_DRAGON_EMBARRASSED_RIGHT = love.graphics.newImage("sprites/dragon_embarrassed_right.png")
global SPRITE_DRAGON_EMBARRASSED_UP = love.graphics.newImage("sprites/dragon_embarrassed_up.png")
global SPRITE_DRAGON_EMBARRASSED_DOWN = love.graphics.newImage("sprites/dragon_embarrassed_down.png")
global SPRITE_FIREBALL_LEFT = love.graphics.newImage("sprites/flame_left.png")
global SPRITE_FIREBALL_RIGHT = love.graphics.newImage("sprites/flame_right.png")
global SPRITE_FIREBALL_UP = love.graphics.newImage("sprites/flame_up.png")
global SPRITE_FIREBALL_DOWN = love.graphics.newImage("sprites/flame_down.png")
global SPRITE_KNIGHT_WALK1 = love.graphics.newImage("sprites/knight_patrol_1.png")
global SPRITE_KNIGHT_WALK2 = love.graphics.newImage("sprites/knight_patrol_2.png")
global SPRITE_KNIGHT_HUNT1 = love.graphics.newImage("sprites/knight_hunt_1.png")
global SPRITE_KNIGHT_HUNT2 = love.graphics.newImage("sprites/knight_hunt_2.png")
global SPRITE_KNIGHT_ATTACK = love.graphics.newImage("sprites/knight_fight.png")
global SPRITE_KNIGHT_IS_HURT = love.graphics.newImage("sprites/knight_hurt.png")
global SPRITE_JOY_WALK1 = love.graphics.newImage("sprites/joy_patrol_1.png")
global SPRITE_JOY_WALK2 = love.graphics.newImage("sprites/joy_patrol_2.png")
global SPRITE_JOY_HUNT1 = love.graphics.newImage("sprites/joy_hunt_1.png")
global SPRITE_JOY_HUNT2 = love.graphics.newImage("sprites/joy_hunt_2.png")
global SPRITE_JOY_ATTACK = love.graphics.newImage("sprites/joy_fight.png")
global SPRITE_JOY_IS_HURT = love.graphics.newImage("sprites/joy_hurt.png")
global SPRITE_SADNESS_WALK1 = love.graphics.newImage("sprites/sadness_patrol_1.png")
global SPRITE_SADNESS_WALK2 = love.graphics.newImage("sprites/sadness_patrol_2.png")
global SPRITE_SADNESS_HUNT1 = love.graphics.newImage("sprites/sadness_hunt_1.png")
global SPRITE_SADNESS_HUNT2 = love.graphics.newImage("sprites/sadness_hunt_2.png")
global SPRITE_SADNESS_ATTACK = love.graphics.newImage("sprites/sadness_fight.png")
global SPRITE_SADNESS_IS_HURT = love.graphics.newImage("sprites/sadness_hurt.png")
global SPRITE_FEAR_WALK1 = love.graphics.newImage("sprites/fear_patrol_1.png")
global SPRITE_FEAR_WALK2 = love.graphics.newImage("sprites/fear_patrol_2.png")
global SPRITE_FEAR_HUNT1 = love.graphics.newImage("sprites/fear_hunt_1.png")
global SPRITE_FEAR_HUNT2 = love.graphics.newImage("sprites/fear_hunt_2.png")
global SPRITE_FEAR_ATTACK = love.graphics.newImage("sprites/fear_fight.png")
global SPRITE_FEAR_IS_HURT = love.graphics.newImage("sprites/fear_hurt.png")
global SPRITE_DISGUST_WALK1 = love.graphics.newImage("sprites/disgust_patrol_1.png")
global SPRITE_DISGUST_WALK2 = love.graphics.newImage("sprites/disgust_patrol_2.png")
global SPRITE_DISGUST_HUNT1 = love.graphics.newImage("sprites/disgust_hunt_1.png")
global SPRITE_DISGUST_HUNT2 = love.graphics.newImage("sprites/disgust_hunt_2.png")
global SPRITE_DISGUST_ATTACK_HORIZONTAL = love.graphics.newImage("sprites/disgust_fight_horizontal.png")
global SPRITE_DISGUST_ATTACK_VERTICAL = love.graphics.newImage("sprites/disgust_fight_vertical.png")
global SPRITE_DISGUST_IS_HURT = love.graphics.newImage("sprites/disgust_hurt.png")
global SPRITE_ANGER_WALK1 = love.graphics.newImage("sprites/anger_patrol_1.png")
global SPRITE_ANGER_WALK2 = love.graphics.newImage("sprites/anger_patrol_2.png")
global SPRITE_ANGER_HUNT1 = love.graphics.newImage("sprites/anger_hunt_1.png")
global SPRITE_ANGER_HUNT2 = love.graphics.newImage("sprites/anger_hunt_2.png")
global SPRITE_ANGER_ATTACK = love.graphics.newImage("sprites/anger_fight.png")
global SPRITE_ANGER_IS_HURT = love.graphics.newImage("sprites/anger_hurt.png")
global SPRITE_SURPRISE_WALK1 = love.graphics.newImage("sprites/surprise_patrol_1.png")
global SPRITE_SURPRISE_WALK2 = love.graphics.newImage("sprites/surprise_patrol_2.png")
global SPRITE_SURPRISE_HUNT1 = love.graphics.newImage("sprites/surprise_hunt_1.png")
global SPRITE_SURPRISE_HUNT2 = love.graphics.newImage("sprites/surprise_hunt_2.png")
global SPRITE_SURPRISE_ATTACK = love.graphics.newImage("sprites/surprise_fight.png")
global SPRITE_SURPRISE_IS_HURT = love.graphics.newImage("sprites/surprise_hurt.png")
global SPRITE_ARROW_LEFT = love.graphics.newImage("sprites/arrow_left.png")
global SPRITE_ARROW_RIGHT = love.graphics.newImage("sprites/arrow_right.png")
global SPRITE_ARROW_UP = love.graphics.newImage("sprites/arrow_up.png")
global SPRITE_ARROW_DOWN = love.graphics.newImage("sprites/arrow_down.png")
global SPRITE_LANCE_LEFT = love.graphics.newImage("sprites/lance_left.png")
global SPRITE_LANCE_RIGHT = love.graphics.newImage("sprites/lance_right.png")
global SPRITE_LANCE_UP = love.graphics.newImage("sprites/lance_up.png")
global SPRITE_LANCE_DOWN = love.graphics.newImage("sprites/lance_down.png")
global SPRITE_DYNAMITE_OFF = love.graphics.newImage("sprites/dynamite_set.png")
global SPRITE_DYNAMITE_ON = love.graphics.newImage("sprites/dynamite_exploded.png")
global SPRITE_WARP1 = love.graphics.newImage("sprites/warp_1.png")
global SPRITE_WARP2 = love.graphics.newImage("sprites/warp_2.png")

global MUSIC_TITLE = love.sound.newSoundData("sounds/title.wav")
global MUSIC_GAMEPLAY_HASINTRO = love.sound.newSoundData("sounds/fullgameplay.wav")
global MUSIC_GAMEPLAY_NOINTRO = love.sound.newSoundData("sounds/gameplay.wav")
global MUSIC_PANIC = love.sound.newSoundData("sounds/panic.wav")
global MUSIC_FAILURE = love.sound.newSoundData("sounds/fail.wav")
global MUSIC_SUCCESS = love.sound.newSoundData("sounds/succeed.wav")
global MUSIC_GAMEOVER = love.sound.newSoundData("sounds/lose.wav")

global EFFECT_BUMP = love.sound.newSoundData("sounds/s_bump.wav")
global EFFECT_SLICE = love.sound.newSoundData("sounds/s_slice.wav")
global EFFECT_PIERCE = love.sound.newSoundData("sounds/s_pierce.wav")
global EFFECT_EXPLODE = love.sound.newSoundData("sounds/s_explode.wav")
global EFFECT_RETREAT = love.sound.newSoundData("sounds/s_retreat.wav")
global EFFECT_FIRE_BREATHE = love.sound.newSoundData("sounds/s_fire.wav")
global EFFECT_FIRE_HIT = love.sound.newSoundData("sounds/s_fire_hit.wav")
global EFFECT_WARP = love.sound.newSoundData("sounds/s_warp.wav")
global EFFECT_BLOCKED_FIRE = love.sound.newSoundData("sounds/s_blocked_fire.wav")
global EFFECT_GOT_TREASURE = love.sound.newSoundData("sounds/s_treasure.wav")


//internal variables
global currentMusic
global titlePhase = true
global intermissionPhase = false
global setupPhase = false
global normalPhase = false
global panicPhase = false
global startup = true
global currentLevel = 0
global previousLevel = 0
global tries = 3
global incrementor = (currentLevel / 2) * 2
global currentDungeonLength = INITIAL_DUNGEON_SIZE + incrementor
global dungeon = []
global allFloorLocations = []
global opponentSetupFloorLocations = []
global safeFloorLocations = []
global collisionWorld = []
global opponentList = []
global hazardList = []
global treasureLocation = []
global gotTreasure = false
global knightStep = 0
global isFireballThere = false
global fearCount = 0
global arrowCount = 0
global surpriseCount = 0
global dynamiteCount = 0
global highestRound = 0


//translatable variables
global language
global sprite_titleScreen
global message_copyright = "Tinglar 2017‒2018"
global message_pressA
global message_highestRound
global message_currentRound
global message_tries
global message_gameOver
global message_finalRound



/* data structures */

//classes
class Player {
	var activeSprite = SPRITE_DRAGON_FLY1_DOWN
	var position = [8, 8]
	var currentTile = [1, 1]
	var orientation = "south"
	var isHurt = false
	var horizontalMovement = 0
	var verticalMovement = 0
}

class Opponent {
	var emotion
	var activeSprite
	var position = []
	var currentTile = []
	var orientation
	var crossOfSight = []
	var target = []
	var path = []
	var isPatrolling = false
	var isHunting = false
	var horizontalMovement
	var verticalMovement
	var pauseCounter = 3
}

class ArrowFire {
	var type
	var activeSprite
	var position = []
	var currentTile = []
	var orientation
	var horizontalMovement
	var verticalMovement
}

class Dynamite {
	var type = "dynamite"
	var activeSprite = SPRITE_DYNAMITE_OFF
	var position = []
	var currentTile = []
	var explosionCount = love.math.random(4, 20)
}



/* algorithms */
def Translate() {
	if (language == "eng") {
	sprite_titleScreen = love.graphics.newImage("sprites/title.png")
	message_pressA = "Press A."
	message_highestRound = "Highest Round: " + (highestRound + 1)
	message_currentRound = "Round " + (currentLevel + 1)
	message_tries = "Tries: " + tries
	message_gameOver = "Game Over"
	message_finalRound = "Final Round: " + (currentLevel + 1)
	}
	
	else if (language == "spa") {
	sprite_titleScreen = love.graphics.newImage("sprites/title.png")
	message_pressA = "Oprima A."
	message_highestRound = "Ronda Más Alta: " + (highestRound + 1)
	message_currentRound = "Ronda " + (currentLevel + 1)
	message_tries = "Intentos: " + tries
	message_gameOver = "Acabó el Juego"
	message_finalRound = "Última Ronda: " + (currentLevel + 1)
	}
	
	else if (language == "epo") {
	sprite_titleScreen = love.graphics.newImage("sprites/title.png")
	message_pressA = "Premu A."
	message_highestRound = "Plej Alta Raŭndo: " + (highestRound + 1)
	message_currentRound = "Raŭndo " + (currentLevel + 1)
	message_tries = "Provoj: " + tries
	message_gameOver = "Finis la Ludo"
	message_finalRound = "Fina Raŭndo: " + (currentLevel + 1)
	}
	
}


def TitleScreen() {
	love.graphics.clear()
	love.graphics.draw(sprite_titleScreen, 32, 32)
	love.graphics.print(message_copyright, 40, 64)
	love.graphics.print(message_pressA, 48, 84)
	love.graphics.print(message_highestRound, 0, 120)
}


def TitleRun() {
	currentMusic = love.sound.newSoundData(MUSIC_TITLE)
	currentMusic.play()
	
	if ( love.joystick[0].isDown("A") ) {
		titlePhase = false
		intermissionPhase = true
		IntermissionScreen()
	}
}


def IntermissionScreen() {
	love.graphics.clear()
	love.graphics.print(message_currentLevel, 50, 56)
	love.graphics.print(message_tries, 31, 70)
}


def IntermissionRun() {
	currentMusic = false
	currentMusic.play()
	
	if ( love.joystick[0].isDown("A") ) {
		intermissionPhase = false
		setupPhase = true
		GameSetup()
	}
}


def gameSetup {
}


def Average(a, b) {
	return (a + b) / 2 
}


def DungeonStructure() {
	for (var vertical = 0; vertical < currentDungeonLength; ++vertical) {
		for (var horizontal = 0; horizontal < currentDungeonLength; ++horizontal) {
			dungeon[vertical][horizontal] = WALL_CELL
		}
	}
}

def PlanDungeon() {
	var horizontal = ( love.math.random(1, currentDungeonLength) ) + 1
	var vertical = ( love.math.random(1, currentDungeonLength) ) + 1
	
	if (horizontal % 2 == 1) {
		if (horizontal == currentDungeonLength) {
			horizontal = currentDungeonLength - 1
			}
		else {
			horizontal++
		}
	}	
	if (vertical % 2 == 1) {
		if (vertical == currentDungeonLength) {
			vertical = currentDungeonLength - 1
			}
		else {
			vertical++
		}
	}
	
	WalkDungeon(horizontal, vertical)
	DemolishDungeon(currentDungeonLength, currentDungeonLength)
}


// fisher-yates shuffle from http://santos.nfshost.com/shuffling.html
def Shuffle(queue) {
	for (var index = 0; index < (queue.length() - 1); ++index) {
		var random = love.math.random(0, index)
		var basin = queue[index]
		queue[index] = queue[random]
		queue[random] = basin
	}
}

def WalkDungeonWalk(width, height) {
	dungeon[height][width] = FLOOR_CELL
	var directions = [1, 2, 3, 4]
	
	Shuffle(directions)
	for (var index : directions) {
		var horizontal = width + corners[index][0]
		var vertical = height + corners[index][1]
		if ( dungeon[vertical][horizontal] ) {
			dungeon[ average(height, vertical) ][ average(width, horizontal) ] = FLOOR_CELL
			WalkDungeon(horizontal, vertical)
		}
	}
}

def DemolishDungeon(width, height) {
	var demolitionForce = 0
	
	for (var vertical = 1; vertical < height - 2; ++vertical) {
		for (var horizontal = 1; horizontal < width - 2; ++horizontal) {
			demolitionForce = love.math.random(0.0, 1.0)
			if demolitionForce >= WALL_STRENGTH {
				dungeon[vertical][horizontal] = FLOOR_CELL
			}
		}
	}		
}


def DrawDungeon() {
	for (var vertical = 0; vertical < currentDungeonLength - 1; ++vertical) {
		for (var horizontal = 0; horizontal < currentDungeonLength - 1; ++horizontal) {
			if (dungeon[vertical][horizontal] == WALL_CELL) {
				love.graphics.draw(sprite_wall, (horizontal - 1) * 8 + 1, (vertical - 1) * 8 + 1)
			}
			else {
				love.graphics.draw(sprite_floor, (horizontal - 1) * 8 + 1, (vertical - 1) * 8 + 1)
			}
		}
	}
}


def CollectFloorCells() {
	for (var vertical = 0; vertical < currentDungeonLength - 1; ++vertical) {
		for (var horizontal = 0; horizontal < currentDungeonLength - 1; ++horizontal) {
			if (dungeon[vertical][horizontal] == FLOOR_CELL) {
				allFloorLocations.push_back( [horizontal, vertical] )
			}
		}
	}
}


def CollectOpponentSetupCells() {
	var topHalfOfDungeon = currentDungeonLength / 2
	
	for (var index = 0; index < allFloorLocations.length() - 2; ++index) {
		if (allFloorLocations[index][1] > topHalfOfDungeon || allFloorLocations[index][2] > topHalfOfDungeon) {
			opponentSetupFloorLocations.push_back( allFloorLocations[index] )
		}
	}
}


def GenerateEmotion() {
	var roll = love.math.random(0, 5)
	
	if (roll == 0) {
		return "joy"
	}
	else if (roll == 0) {
		return "sadness"
	}
	else if (roll == 0) {
		fearCount++
		return "fear"
	}
	else if (roll == 0) {
		return "disgust"
	}
	else if (roll == 0) {
		return "anger"
	}
	else {
		surpriseCount++
		return "surprise"
	}
}


def InitializeSubordinateSprite(opponent) {
	if opponent.emotion == "joy" {
		opponent.activeSprite = SPRITE_JOY_WALK1
	}
	else if opponent.emotion == "sadness" {
		opponent.activeSprite = SPRITE_SADNESS_WALK1
	}
	else if opponent.emotion == "fear" {
		opponent.activeSprite = SPRITE_FEAR_WALK1
	}
	else if opponent.emotion == "disgust" {
		opponent.activeSprite = SPRITE_DISGUST_WALK1
	}
	else if opponent.emotion == "anger" {
		opponent.activeSprite = SPRITE_ANGER_WALK1
	}
	else if opponent.emotion == "surprise" {
		opponent.activeSprite = SPRITE_SURPRISE_WALK1
	}
}


def PlaceKnight() {
	var position = opponentSetupFloorLocations.pop_back()
	position[HORIZONTAL_DIMENSION] = position[HORIZONTAL_DIMENSION] * 8
	position[VERTICAL_DIMENSION] = position[VERTICAL_DIMENSION] * 8
	return position
}


def PlaceSubordinate() {
	var roll = love.math.random(0, opponentSetupFloorLocations.length() - 1)
	
	var basin = opponentSetupFloorLocations[roll]
	opponentSetupFloorLocations[roll] = opponentSetupFloorLocations[opponentSetupFloorLocations.length() - 1]
	opponentSetupFloorLocations[opponentSetupFloorLocations.length() - 1] = basin
	
	var position = opponentSetupFloorLocations.pop_back()
	position[HORIZONTAL_DIMENSION] = position[HORIZONTAL_DIMENSION] * 8
	position[VERTICAL_DIMENSION] = position[VERTICAL_DIMENSION] * 8
	return position
}


def Populate() {
	global dragon = Player()
	opponentList[0] = Opponent()
	opponentList[0].emotion = "knight"
	opponentList[0].activeSprite = SPRITE_KNIGHT_WALK1
	opponentList[0].position = PlaceKnight()
	opponentList[0].orientation = "north"
	
	for (opponent = 1; opponent < currentDungeonLength / 3 + 1; ++opponent) {
		THIS_OPPONENT = Opponent()
		THIS_OPPONENT.emotion = GenerateEmotion()
		InitializeSubordinateSprite( THIS_OPPONENT )
		THIS_OPPONENT.position = PlaceSubordinate()
		THIS_OPPONENT.orientation = "north"
	}
}


def RunGameplay() {
	
}


def SetCurrentTile(actor) {
	var tile = []
	tile[VERTICAL_DIMENSION] = actor.position[VERTICAL_DIMENSION] / 8
	tile[HORIZONTAL_DIMENSION] = actor.position[HORIZONTAL_DIMENSION] / 8
	return tile
}


def SetCollisionWorld () {
	collisionWorld = []

	for (var iterator = 0; iterator < dungeon.length(); ++iterator) {
		collisionWorld[iterator] = dungeon[iterator]
	}
	
	for (var vertical = 0; vertical < collisionWorld.length(); ++vertical) {
		for (var horizontal = 0; horizontal < collisionWorld[vertical].length(); ++horizontal) {
			for (currentOpponent : opponentList) {
				if ( currrentOpponent.location == collisionWorld[vertical][horizontal] ) {
					collisionWorld[vertical][horizontal] = WALL_CELL
				}
			}
		}
	}
}


def SetOrientation() {
	for (currentOpponent : opponentList) {
		if (currentOpponent.horizontalMovement < 0) {
			currentOpponent.orientation = "west"
		}
		else if (currentOpponent.horizontalMovement > 0) {
			currentOpponent.orientation = "east"
		}
		
		if (currentOpponent.verticalMovement < 0) {
			currentOpponent.orientation = "north"
		}
		else if (currentOpponent.verticalMovement > 0) {
			currentOpponent.orientation = "south"
		}
	}
}


def CountDownDynamite() {
	for (hazard : hazardList) {
		if (THIS_HAZARD.type == "dynamite") {
			THIS_HAZARD.explosionCount--
		}
	}
}


def ExplodeDynamite() {
	for (hazard : hazardList) {
		if (THIS_HAZARD.type == "dynamite") {
			if (THIS_HAZARD.explosionCount == DYNAMITE_EXPLOSION_POINT) {
				THIS_HAZARD.activeSprite = SPRITE_DYNAMITE_ON
				var effect = love.sound.newSoundData(EFFECT_EXPLODE)
				effect.play()
			}
		}
	}
}


def ClearDynamite() {
	for (hazard : hazardList) {
		if (THIS_HAZARD.type == "dynamite") {
			if (THIS_HAZARD.explosionCount < DYNAMITE_ERASURE_POINT) {
				EraseHazard(hazard)
				dynamiteCount--
			}
		}
	}
}


def EraseHazard(hazard) {
	if (THIS_HAZARD.type == "arrow") {
		arrowCount--
	}
	else if (THIS_HAZARD.type == "fire") {
		isFireballThere = false
	}
	THIS_HAZARD = hazardList[hazardList.length()]
	hazardList.pop_back()
}


def EraseSafeCell(cell) {
	safeFloorLocations[cell] = safeFloorLocations[ safeFloorLocations.length() ]
	safeFloorLocations.pop_back()
}


def CollectSafeCells() {
	safeFloorLocations = allFloorLocations
	
	for (hazard : hazardList) { 
		for (cell : safeFloorLocations) {
			if ( safeFloorLocations[cell] == THIS_HAZARD.currentTile ) {
				EraseSafeCell(cell)
			}

			else {
				if (THIS_HAZARD.type == "arrow" || THIS_HAZARD.type == "fire") {
					if (THIS_HAZARD.orientation == "west") {
						if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] - 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] ]) {
							EraseSafeCell(cell)
						}
					}
					else if (THIS_HAZARD.orientation == "east") {
						if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] + 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] ]) {
							EraseSafeCell(cell)
						}
					}
					else if (THIS_HAZARD.orientation == "north") {
						if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION], THIS_HAZARD.currentTile[VERTICAL_DIMENSION] - 1 ]) {
							EraseSafeCell(cell)
						}
					}
					else if (THIS_HAZARD.orientation == "south") {
						if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION], THIS_HAZARD.currentTile[VERTICAL_DIMENSION] + 1 ]) {
							EraseSafeCell(cell)
						}
					}
				}
	
				else if ( THIS_HAZARD.type == "dynamite" ) {
					if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] - 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] ]) {
						EraseSafeCell(cell)
					}
					else if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] + 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] ]) {
						EraseSafeCell(cell)
					}
					else if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] - 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] - 1 ]) {
						EraseSafeCell(cell)
					}
					else if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] + 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] - 1 ]) {
						EraseSafeCell(cell)
					}
					else if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] - 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] + 1 ]) {
						EraseSafeCell(cell)
					}
					else if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION] + 1, THIS_HAZARD.currentTile[VERTICAL_DIMENSION] + 1 ]) {
						EraseSafeCell(cell)
					}
					else if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION], THIS_HAZARD.currentTile[VERTICAL_DIMENSION] - 1 ]) {
						EraseSafeCell(cell)
					}
					else if ( safeFloorLocations[cell] == [ THIS_HAZARD.currentTile[HORIZONTAL_DIMENSION], THIS_HAZARD.currentTile[VERTICAL_DIMENSION] + 1 ]) {
						EraseSafeCell(cell)
					}
				}

			}
		}
	}
}


def SetCrossOfSight() {
	for (currentOpponent : opponentList) {
		currentOpponent.crossOfSight = []
		
		if (currentOpponent.orientation == "north") {
			if (collisionWorld[ currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL - 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL - 1 )
			}
			if (collisionWorld[ currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL + 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL + 1 )
			}
			for (look = 0; collisionWorld[ currentOpponent.TILE_VERTICAL - look, currentOpponent.TILE_HORIZONTAL ] == FLOOR_CELL; --checkedCell) {
				currentOpponent.crossOfSight.push_back( collisionWorld[ currentOpponent.TILE_VERTICAL - look, currentOpponent.TILE_HORIZONTAL )
			}
			
		else if (currentOpponent.orientation == "south") {
			if (collisionWorld[ currentOpponent.TILE_VERTICAL + 1, currentOpponent.TILE_HORIZONTAL - 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL - 1 )
			}
			if (collisionWorld[ currentOpponent.TILE_VERTICAL + 1, currentOpponent.TILE_HORIZONTAL + 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL + 1 )
			}
			for (look = 0; collisionWorld[ currentOpponent.TILE_VERTICAL + look, currentOpponent.TILE_HORIZONTAL ] == FLOOR_CELL; --checkedCell) {
				currentOpponent.crossOfSight.push_back( collisionWorld[ currentOpponent.TILE_VERTICAL + look, currentOpponent.TILE_HORIZONTAL )
			}
			
		else if (currentOpponent.orientation == "west") {
			if (collisionWorld[ currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL - 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL - 1 )
			}
			if (collisionWorld[ currentOpponent.TILE_VERTICAL + 1, currentOpponent.TILE_HORIZONTAL + 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL + 1 )
			}
			for (look = 0; collisionWorld[ currentOpponent.TILE_VERTICAL, currentOpponent.TILE_HORIZONTAL - look ] == FLOOR_CELL; --checkedCell) {
				currentOpponent.crossOfSight.push_back( collisionWorld[ currentOpponent.TILE_VERTICAL, currentOpponent.TILE_HORIZONTAL - look )
			}
			
		else if (currentOpponent.orientation == "east") {
			if (collisionWorld[ currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL + 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL - 1 )
			}
			if (collisionWorld[ currentOpponent.TILE_VERTICAL + 1, currentOpponent.TILE_HORIZONTAL + 1 ] == FLOOR_CELL) {
				currentOpponent.crossOfSight.push_back( currentOpponent.TILE_VERTICAL - 1, currentOpponent.TILE_HORIZONTAL + 1 )
			}
			for (look = 0; collisionWorld[ currentOpponent.TILE_VERTICAL, currentOpponent.TILE_HORIZONTAL + look ] == FLOOR_CELL; --checkedCell) {
				currentOpponent.crossOfSight.push_back( collisionWorld[ currentOpponent.TILE_VERTICAL, currentOpponent.TILE_HORIZONTAL + look )
			}
		}
	}
}


/* collision-detection code translated from Mozilla
https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection  */

def DidICollideWithAnActor(me, you) {
	if ( (me.POSITION_HORIZONTAL < you.POSITION_HORIZONTAL + SQUARE_SIZE) && (me.POSITION_HORIZONTAL + SQUARE_SIZE > you.POSITION_HORIZONTAL) && (me.POSITION_VERTICAL < you.POSITION_VERTICAL + SQUARE_SIZE) && (SQUARE_SIZE + me.POSITION_VERTICAL > you.POSITION_VERTICAL) ) {
		return true
	}
}


def DidIHitAWall(me, tile) {
	if ( (me.POSITION_HORIZONTAL < tile[HORIZONTAL_DIMENSION] * SQUARE_SIZE + SQUARE_SIZE) && (me.POSITION_HORIZONTAL + SQUARE_SIZE > tile[HORIZONTAL_DIMENSION] * SQUARE_SIZE ) && (me.POSITION_VERTICAL < tile[VERTICAL_DIMENSION] * SQUARE_SIZE + SQUARE_SIZE) && (SQUARE_SIZE + me.POSITION_VERTICAL > tile[VERTICAL_DIMENSION] * SQUARE_SIZE ) ) {
		return true
	}
}


def SetOpponentVelocity(opponent, velocity) {
	if ( opponent.target[HORIZONTAL_DIMENSION] < opponent.currentTile[HORIZONTAL_DIMENSION] ) {
		opponent.horizontalMovement = -velocity
	}
	else if ( opponent.target[HORIZONTAL_DIMENSION] > opponent.currentTile[HORIZONTAL_DIMENSION] ) {
		opponent.horizontalMovement = velocity
	}
	else if ( opponent.target[VERTICAL_DIMENSION] < opponent.currentTile[VERTICAL_DIMENSION] ) {
		opponent.verticalMovement = -velocity
	}
	else if ( opponent.target[VERTICAL_DIMENSION] > opponent.currentTile[VERTICAL_DIMENSION] ) {
		opponent.verticalMovement = velocity
	}
}


def ControlDragon() {
	if (dragon.isHurt == false) {
		if ( love.joystick[0].isDown("left") ) {
			dragon.horizontalMovement = -0.2
		}
		if ( love.joystick[0].isDown("right") ) {
			dragon.horizontalMovement = 0.2
		}
		if ( love.joystick[0].isDown("left") == false && love.joystick[0].isDown("right") == false ) {
			dragon.horizontalMovement = 0
		}
		if ( love.joystick[0].isDown("up") ) {
			dragon.horizontalMovement = -0.2
		}
		if ( love.joystick[0].isDown("down") ) {
			dragon.horizontalMovement = 0.2
		}
		if ( love.joystick[0].isDown("up") == false && love.joystick[0].isDown("down") == false ) {
			dragon.horizontalMovement = 0
		}
		
		if ( love.joystick[0].isDown("A") ) {
			if (isFireballThere == false) {
				isFireballThere = true
				
				var fire = Hazard()
				fire.type = "fire"
				fire.orientation = dragon.orientation
				
				if (fire.orientation == "west") {
					fire.activeSprite = SPRITE_FIREBALL_LEFT
					fire.position = [ (dragon.POSITION_HORIZONTAL - 8), (dragon.POSITION_VERTICAL) ]
					fire.horizontalMovement = -0.4
					fire.verticalMovement = 0
				}
				else if (fire.orientation == "east") {
					fire.activeSprite = SPRITE_FIREBALL_LEFT
					fire.position = [ (dragon.POSITION_HORIZONTAL + 8), (dragon.POSITION_VERTICAL) ]
					fire.horizontalMovement = 0.4
					fire.verticalMovement = 0
				}
				else if (fire.orientation == "north") {
					fire.activeSprite = SPRITE_FIREBALL_LEFT
					fire.position = [ (dragon.POSITION_HORIZONTAL), (dragon.POSITION_VERTICAL - 8) ]
					fire.horizontalMovement = 0
					fire.verticalMovement = -0.4
				}
				else if (fire.orientation == "south") {
					fire.activeSprite = SPRITE_FIREBALL_LEFT
					fire.position = [ (dragon.POSITION_HORIZONTAL), (dragon.POSITION_VERTICAL + 8) ]
					fire.horizontalMovement = 0
					fire.verticalMovement = 0.4
				}
				
				hazardList.push_back(fire)
				var effect = love.sound.newSoundData(EFFECT_FIRE_BREATHE)
				effect.play()
			}
		}
	}
}


def Cleanup() {

}


def HurtOpponent(opponent) {

}


def ReturnToYourPlaces() {
	dragon.position = [8, 8]
	
	for (opponent : opponentList) {
		if (THIS_OPPONENT.emotion == "knight") {
			THIS_OPPONENT.position = PlaceKnight()
		}
		else {
			THIS_OPPONENT.position = PlaceSubordinate()
		}
	}
	
	hazardList = []
}


def SetCurrentDragonSprite() {
	if (dragon.horizontalMovement != 0 && dragon.verticalMovement != 0) {
		if (dragon.horizontalMovement < 0) {
			if (dragon.activeSprite == SPRITE_DRAGON_FLY1_LEFT) {
				dragon.activeSprite = SPRITE_DRAGON_FLY2_LEFT
			}
			else {
				dragon.activeSprite = SPRITE_DRAGON_FLY1_LEFT
			}
		}
		else if (dragon.horizontalMovement > 0) {
			if (dragon.activeSprite == SPRITE_DRAGON_FLY1_RIGHT) {
				dragon.activeSprite = SPRITE_DRAGON_FLY2_RIGHT
			}
			else {
				dragon.activeSprite = SPRITE_DRAGON_FLY1_RIGHT
			}
		}
		if (dragon.verticalMovement < 0) {
			if (dragon.activeSprite == SPRITE_DRAGON_FLY1_UP) {
				dragon.activeSprite = SPRITE_DRAGON_FLY2_UP
			}
			else {
				dragon.activeSprite = SPRITE_DRAGON_FLY1_UP
			}
		}
		else if (dragon.verticalMovement > 0) {
			if (dragon.activeSprite == SPRITE_DRAGON_FLY1_DOWN) {
				dragon.activeSprite = SPRITE_DRAGON_FLY2_DOWN
			}
			else {
				dragon.activeSprite = SPRITE_DRAGON_FLY1_DOWN
			}
		}
	}
	
	if ( love.joystick[0].isDown("A") ) {
		if (dragon.activeSprite == SPRITE_DRAGON_FLY1_LEFT || dragon.activeSprite == SPRITE_DRAGON_FLY2_LEFT) {
			dragon.activeSprite = SPRITE_DRAGON_FIRE_LEFT
		}
		else if (dragon.activeSprite == SPRITE_DRAGON_FLY1_RIGHT || dragon.activeSprite == SPRITE_DRAGON_FLY2_RIGHT) {
			dragon.activeSprite = SPRITE_DRAGON_FIRE_RIGHT
		}
		else if (dragon.activeSprite == SPRITE_DRAGON_FLY1_UP || dragon.activeSprite == SPRITE_DRAGON_FLY2_UP) {
			dragon.activeSprite = SPRITE_DRAGON_FIRE_UP
		}
		else if (dragon.activeSprite == SPRITE_DRAGON_FLY1_DOWN || dragon.activeSprite == SPRITE_DRAGON_FLY2_DOWN) {
			dragon.activeSprite = SPRITE_DRAGON_FIRE_DOWN
		}
	}
}


def SetCurrentOpponentSprite() {
	for (opponent : opponentList) {
		if (normalPhase == true) {
			if (THIS_OPPONENT.horizontalMovement != 0 && THIS_OPPONENT.verticalMovement != 0) {
				if (THIS_OPPONENT.emotion = "knight") {
					if (THIS_OPPONENT.activeSprite == SPRITE_KNIGHT_WALK1) {
						THIS_OPPONENT.activeSprite = SPRITE_KNIGHT_WALK2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_KNIGHT_WALK1
					}
				}
				else if (THIS_OPPONENT.emotion = "joy") {
					if (THIS_OPPONENT.activeSprite == SPRITE_JOY_WALK1) {
						THIS_OPPONENT.activeSprite = SPRITE_JOY_WALK2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_JOY_WALK1
					}
				}
				else if (THIS_OPPONENT.emotion = "sadness") {
					if (THIS_OPPONENT.activeSprite == SPRITE_SADNESS_WALK1) {
						THIS_OPPONENT.activeSprite = SPRITE_SADNESS_WALK2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_SADNESS_WALK1
					}
				}
				else if (THIS_OPPONENT.emotion = "fear") {
					if (THIS_OPPONENT.activeSprite == SPRITE_FEAR_WALK1) {
						THIS_OPPONENT.activeSprite = SPRITE_FEAR_WALK2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_FEAR_WALK1
					}
				}
				else if (THIS_OPPONENT.emotion = "disgust") {
					if (THIS_OPPONENT.activeSprite == SPRITE_DISGUST_WALK1) {
						THIS_OPPONENT.activeSprite = SPRITE_DISGUST_WALK2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_DISGUST_WALK
					}
				}
				else if (THIS_OPPONENT.emotion = "anger") {
					if (THIS_OPPONENT.activeSprite == SPRITE_ANGER_WALK1) {
						THIS_OPPONENT.activeSprite = SPRITE_ANGER_WALK2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_ANGER_WALK1
					}
				}
				else if (THIS_OPPONENT.emotion = "surprise") {
					if (THIS_OPPONENT.activeSprite == SPRITE_SURPRISE_WALK1) {
						THIS_OPPONENT.activeSprite = SPRITE_SURPRISE_WALK2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_SURPRISE_WALK1
					}
				}
			}
		}
		
		else if (panicPhase == true) {
			if (THIS_OPPONENT.horizontalMovement != 0 && THIS_OPPONENT.verticalMovement != 0) {
				if (THIS_OPPONENT.emotion = "knight") {
					if (THIS_OPPONENT.activeSprite == SPRITE_KNIGHT_HUNT1) {
						THIS_OPPONENT.activeSprite = SPRITE_KNIGHT_HUNT2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_KNIGHT_HUNT1
					}
				}
				else if (THIS_OPPONENT.emotion = "joy") {
					if (THIS_OPPONENT.activeSprite == SPRITE_JOY_HUNT1) {
						THIS_OPPONENT.activeSprite = SPRITE_JOY_HUNT2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_JOY_HUNT1
					}
				}
				else if (THIS_OPPONENT.emotion = "sadness") {
					if (THIS_OPPONENT.activeSprite == SPRITE_SADNESS_HUNT1) {
						THIS_OPPONENT.activeSprite = SPRITE_SADNESS_HUNT2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_SADNESS_HUNT1
					}
				}
				else if (THIS_OPPONENT.emotion = "fear") {
					if (THIS_OPPONENT.activeSprite == SPRITE_FEAR_HUNT1) {
						THIS_OPPONENT.activeSprite = SPRITE_FEAR_HUNT2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_FEAR_HUNT1
					}
				}
				else if (THIS_OPPONENT.emotion = "disgust") {
					if (THIS_OPPONENT.activeSprite == SPRITE_DISGUST_HUNT1) {
						THIS_OPPONENT.activeSprite = SPRITE_DISGUST_HUNT2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_DISGUST_HUNT
					}
				}
				else if (THIS_OPPONENT.emotion = "anger") {
					if (THIS_OPPONENT.activeSprite == SPRITE_ANGER_HUNT1) {
						THIS_OPPONENT.activeSprite = SPRITE_ANGER_HUNT2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_ANGER_HUNT1
					}
				}
				else if (THIS_OPPONENT.emotion = "surprise") {
					if (THIS_OPPONENT.activeSprite == SPRITE_SURPRISE_HUNT1) {
						THIS_OPPONENT.activeSprite = SPRITE_SURPRISE_HUNT2
					}
					else {
						THIS_OPPONENT.activeSprite = SPRITE_SURPRISE_HUNT1
					}
				}
			}
		}
	}
}


def DrawEnvironment() {
	for (var vertical = 0; vertical < currentDungeonLength; ++vertical) {
		for (var horizontal = 0; horizontal < currentDungeonLength; ++horizontal) {
			if (horizontal == 2 && vertical == 1) {
				if (gotTreasure == false) {
					love.graphics.draw(SPRITE_DOOR_CLOSED, 16, 0)
				}
				else if (gotTreasure == true) {
					love.graphics.draw(SPRITE_DOOR_OPEN, 16, 0)
				}
			}
			else if (horizontal == currentDungeonLength - 2 && vertical == currentDungeonLength - 2) {
				if (gotTreasure == false) {
					love.graphics.draw(SPRITE_TREASURE_CLOSED_CLOSED, horizontal * 8, vertical * 8)
				}
				else if (gotTreasure == true) {
					love.graphics.draw(SPRITE_TREASURE_OPEN_CLOSED, horizontal * 8, vertical * 8)
				}
			}
			else {
				if (dungeon[vertical][horizontal] == WALL_CELL) {
				love.graphics.draw(SPRITE_WALL, horizontal * 8, vertical * 8)
				}
				else if (dungeon[vertical][horizontal] == FLOOR_CELL) {
				love.graphics.draw(SPRITE_FLOOR, horizontal * 8, vertical * 8)
				}
			}
		}
	}
}


def DrawActors() {
	love.graphics.draw(dragon.activeSprite, position[HORIZONTAL_DIMENSION], position[VERTICAL_DIMENSION]
	
	for (opponent : opponentList) {
		love.graphics.draw(THIS_OPPONENT.activeSprite, position[HORIZONTAL_DIMENSION], position[VERTICAL_DIMENSION]
	}
	
	for (hazard : hazardList) {
		love.graphics.draw(THIS_HAZARD.activeSprite, position[HORIZONTAL_DIMENSION], position[VERTICAL_DIMENSION]
	}
}


def BreadthFirst(startCell, endCell) {
	var frontier = [startCell]
	var checkingCell = []
	var visitedCells = []
	

	while ( frontier.length() > 0 ) {
		checkingCell = frontier.pop_back()

		if (checkingCell == endCell) {
			return visitedCells
		}

		if ( dungeon[ checkingCell[0] - 1 ][ checkingCell[1] ] == FLOOR_CELL && AlreadyChecked( checkingCell[0] - 1, checkingCell[1] ) == false) {
			frontier.push_back([ checkingCell[0] - 1 ][ checkingCell[1] ])
			visitedCells.push_back([ checkingCell[0] - 1 ][ checkingCell[1] ])
		}
		if ( dungeon[ checkingCell[0] + 1 ][ checkingCell[1] ] == FLOOR_CELL && AlreadyChecked( checkingCell[0] + 1, checkingCell[1] ) == false) {
			frontier.push_back([ checkingCell[0] + 0 ][ checkingCell[1] ])
			visitedCells.push_back([ checkingCell[0] + 0 ][ checkingCell[1] ])
		}
		if ( dungeon[ checkingCell[0] ][ checkingCell[1] - 1 ] == FLOOR_CELL && AlreadyChecked( checkingCell[0], checkingCell[1] - 1 ) == false) {
			frontier.push_back([ checkingCell[0] ][ checkingCell[1] - 1 ])
			visitedCells.push_back([ checkingCell[0] ][ checkingCell[1] - 1 ])
		}
		if ( dungeon[ checkingCell[0] ][ checkingCell[1] + 1 ] == FLOOR_CELL && AlreadyChecked( checkingCell[0], checkingCell[1] + 1 ) == false) {
			frontier.push_back([ checkingCell[0] ][ checkingCell[1] + 1 ])
			visitedCells.push_back([ checkingCell[0] ][ checkingCell[1] + 1 ])
		}
	}

	return visitedCells
}


def AlreadyChecked( vertical, horizontal ) {
	for (item : frontier) {
		// TODO: Do something with item.
		if ( [vertical, horizontal] ) {
			return true
		}
	}
	return false
}



def PatrolSystem() {
	for (opponent : opponentList) {
		if (THIS_OPPONENT.isPatrolling == true && THIS_OPPONENT.isHunting == false) {

			if (THIS_OPPONENT.emotion == "knight") {
				if (THIS_OPPONENT.path.length() < 1) {
					for (currentCell = safeFloorCells.length(), currentCell = 0, --currentCell) {
						if ( safeFloorCells[currentCell] == [currentDungeonLength - 3, currentDungeonLength - 2] ) {
							THIS_OPPONENT.path.push_back( [currentDungeonLength - 3, currentDungeonLength - 2] )
						}
						if ( safeFloorCells[currentCell] == [currentDungeonLength - 3, currentDungeonLength - 3] ) {
							THIS_OPPONENT.path.push_back( [currentDungeonLength - 3, currentDungeonLength - 3] )
						}
						if ( safeFloorCells[currentCell] == [currentDungeonLength - 2, currentDungeonLength - 3] ) {
							THIS_OPPONENT.path.push_back( [currentDungeonLength - 2, currentDungeonLength - 3] )
						}
					}
				}
				else {
					if ( knightStep <= THIS_OPPONENT.path.length() ) {
						THIS_OPPONENT.target = THIS_OPPONENT[knightStep]
						SetOpponentVelocity(THIS_OPPONENT, 1)
						knightStep++
					}
					else {
						var hold = THIS_OPPONENT.path[ THIS_OPPONENT.path.length() ]
						THIS_OPPONENT.path[ THIS_OPPONENT.path.length() ] = THIS_OPPONENT.path[0]
						THIS_OPPONENT.path = hold
						knightStep = 1
					}
				}
			}
			else if (THIS_OPPONENT.emotion == "joy") {
				if (THIS_OPPONENT.path.length() < 1) {
					var roll = love.math.random( 0, safeFloorLocations.length() )
					var pickedTarget = safeFloorLocations[roll]
					THIS_OPPONENT.path = BreadthFirst(THIS_OPPONENT.currentTile, pickedTarget)
				}
				else {
					if (THIS_OPPONENT.currentTile == THIS_OPPONENT.target) {
						THIS_OPPONENT.target = THIS_OPPONENT.path.pop_back()
					}
					SetOpponentVelocity(THIS_OPPONENT, 1)
				}
			}

			// Sadness stays still when "patrolling."

			else if (THIS_OPPONENT.emotion == "fear") {
				if (THIS_OPPONENT.path.length() < 1) {
					THIS_OPPONENT.path.push_back(THIS_OPPONENT.position)
					for (currentTile : safeFloorLocations) {
						if ( [ THIS.OPPONENT.location[0], THIS_OPPONENT.location[1] - 1 ] == safeFloorLocations[currentTile] ) {
							THIS_OPPONENT.path.push_back(safeFloorLocations[currentTile])
							break
						}
						if ( [ THIS.OPPONENT.location[0], THIS_OPPONENT.location[1] + 1 ] == safeFloorLocations[currentTile] ) {
							THIS_OPPONENT.path.push_back(safeFloorLocations[currentTile])
							break
						}
						if ( [ THIS.OPPONENT.location[0] - 1, THIS_OPPONENT.location[1] ] == safeFloorLocations[currentTile] ) {
							THIS_OPPONENT.path.push_back(safeFloorLocations[currentTile])
							break
						}
						if ( [ THIS.OPPONENT.location[0] + 1, THIS_OPPONENT.location[1] ] == safeFloorLocations[currentTile] ) {
							THIS_OPPONENT.path.push_back(safeFloorLocations[currentTile])
							break
						}
					}
				}
				else {
					THIS_OPPONENT.target = pop_back(THIS_OPPONENT.path)
					THIS_OPPONENT.path.push_back(THIS_OPPONENT.target)
					SetOpponentVelocity(THIS_OPPONENT, 1)
				}
			}

			else if (THIS_OPPONENT.emotion == "disgust") {
				if (THIS_OPPONENT.path.length() < 1) {
					for (currentTile : safeFloorLocations) {
						if ( THIS_OPPONENT.location != safeFloorLocations[currentTile] ) {
							var checkVertical = safeFloorLocations[currentTile][0]
							var checkHorizontal = safeFloorLocations[currentTile][1]

							for (check : allFloorLocations) {
								if ( [checkVertical - 1, checkHorizontal] == allFloorLocations[check] ) {
									for (check : allFloorLocations) {
										if ( [checkVertical + 1, checkHorizontal] == allFloorLocations[check] ) {
											for (check : allFloorLocations) {
												if ( [checkVertical, checkHorizontal - 1] == allFloorLocations[check] ) {
													for (check : allFloorLocations) {
														if ( [checkVertical, checkHorizontal + 1] == allFloorLocations[check] ) {
															for (check : allFloorLocations) { 
																if ( [checkVertical - 1, checkHorizontal - 1] == allFloorLocations[check] ) {
																	for (check : allFloorLocations) {
																		if ( [checkVertical - 1, checkHorizontal + 1] == allFloorLocations[check] ) {
																			for (check : allFloorLocations) {
																				if ( [checkVertical + 1, checkHorizontal - 1] == allFloorLocations[check] ) {
																					for (check : allFloorLocations) {
																						if ( [checkVertical + 1, checkHorizontal + 1] == allFloorLocations[check] ) {
																							THIS_OPPONENT.path = BreadthFirst( THIS_OPPONENT.currentTile, allFloorLocations[check] )
																							break
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				else {
					THIS_OPPONENT.target = pop_back(THIS_OPPONENT.path)
					SetOpponentVelocity(THIS_OPPONENT, 1)
				}
			}

			else if (THIS_OPPONENT.emotion == "anger") {
				if (THIS_OPPONENT.path.length() < 1) {
					var topRightCorner = safeFloorLocations.length() / 2 - 1
					var bottomLeftCorner = safeFloorLocations.length() / 2 + 1

					THIS_OPPONENT.path.push_back(safeFloorLocations[ 0 ] )
					THIS_OPPONENT.path.push_back(safeFloorLocations[ topRightCorner ] )
					THIS_OPPONENT.path.push_back(safeFloorLocations[ safeFloorLocations.length() ] )
					THIS_OPPONENT.path.push_back(safeFloorLocations[ bottomLengthCorner ] )
				}
				else {
					THIS_OPPONENT.target = pop_back(THIS_OPPONENT.path)
					THIS_OPPONENT.path.push_back(THIS_OPPONENT.target)
					SetOpponentVelocity(THIS_OPPONENT, 1)
				}
			}

			else if (THIS_OPPONENT.emotion == "surprise") {
				if (THIS_OPPONENT.path.length() < 1) {
					var roll = love.math.random( 0, safeFloorLocations.length() )
					var pickedTarget = safeFloorLocations[roll]
					THIS_OPPONENT.path = BreadthFirst(THIS_OPPONENT.currentTile, pickedTarget)

					if (dynamiteCount < surpriseCount) {
						if (THIS_OPPONENT.orientation == "north") {
							for (currentTile : safeFloorLocations) {
								if ( [ THIS_OPPONENT.TILE_VERTICAL + 1, THIS_OPPONENT.TILE_HORIZONTAL] == safeFloorLocations[currentTile] ) {
									var newDynamite = Dynamite
									newDynamite.position = [THIS_OPPONENT.POSITION_VERTICAL + SQUARE_SIZE, THIS_OPPONENT.POSITION_HORIZONTAL]
									newDynamite.currentTile = [THIS_OPPONENT.TILE_VERTICAL + 1, THIS_OPPONENT.TILE_HORIZONTAL]
									hazardList.push_back(newDynamite)
									break
								}
							}
						}
						else if (THIS_OPPONENT.orientation == "south") {
							for (currentTile : safeFloorLocations) {
								if ( [ THIS_OPPONENT.TILE_VERTICAL - 1, THIS_OPPONENT.TILE_HORIZONTAL] == safeFloorLocations[currentTile] ) {
									var newDynamite = Dynamite
									newDynamite.position = [THIS_OPPONENT.POSITION_VERTICAL - SQUARE_SIZE, THIS_OPPONENT.POSITION_HORIZONTAL]
									newDynamite.currentTile = [THIS_OPPONENT.TILE_VERTICAL - 1, THIS_OPPONENT.TILE_HORIZONTAL]
									hazardList.push_back(newDynamite)
									break
								}
							}
						}
						else if (THIS_OPPONENT.orientation == "west") {
							for (currentTile : safeFloorLocations) {
								if ( [ THIS_OPPONENT.TILE_VERTICAL, THIS_OPPONENT.TILE_HORIZONTAL + 1] == safeFloorLocations[currentTile] ) {
									var newDynamite = Dynamite
									newDynamite.position = [THIS_OPPONENT.POSITION_VERTICAL, THIS_OPPONENT.POSITION_HORIZONTAL + SQUARE_SIZE]
									newDynamite.currentTile = [THIS_OPPONENT.TILE_VERTICAL, THIS_OPPONENT.TILE_HORIZONTAL + 1]
									hazardList.push_back(newDynamite)
									break
								}
							}
						}
						else if (THIS_OPPONENT.orientation == "east") {
							for (currentTile : safeFloorLocations) {
								if ( [ THIS_OPPONENT.TILE_VERTICAL, THIS_OPPONENT.TILE_HORIZONTAL - 1] == safeFloorLocations[currentTile] ) {
									var newDynamite = Dynamite
									newDynamite.position = [THIS_OPPONENT.POSITION_VERTICAL, THIS_OPPONENT.POSITION_HORIZONTAL - SQUARE_SIZE]
									newDynamite.currentTile = [THIS_OPPONENT.TILE_VERTICAL, THIS_OPPONENT.TILE_HORIZONTAL - 1]
									hazardList.push_back(newDynamite)
									break
								}
							}
						}
					}
				}
				else {
					THIS_OPPONENT.target = pop_back(THIS_OPPONENT.path)
					SetOpponentVelocity(THIS_OPPONENT, 1)
				}
			} 
		}
	}
}


def FromPatrolToHunt() {
	for (opponent: opponentList) {
		if (THIS_OPPONENT.isHunting == false) {
			if (THIS_OPPONENT.emotion == "knight" && gotTreasure == true) {
				THIS_OPPONENT.isPatrolling = false
				THIS_OPPONENT.target = []
				THIS_OPPONENT.path = []
				THIS_OPPONENT.isHunting = true
			}
		}

		for (look : THIS_OPPONENT.crossOfSight) {
			if (THIS_OPPONENT.crossOfSight == dragon.currentTile) {
				THIS_OPPONENT.isPatrolling = false
				THIS_OPPONENT.target = []
				THIS_OPPONENT.path = []
				THIS_OPPONENT.isHunting = true
			}
		}
	}
}


def HuntSystem() {
	for (opponent : opponentList) {
		if (THIS_OPPONENT.isHunting == true) {

			if (panicPhase == false) {
				panicPhase = true
				currentMusic = love.sound.newSoundData(MUSIC_PANIC)
				currentMusic.play()
			}

			if (THIS_OPPONENT.emotion == "knight" || THIS_OPPONENT.emotion == "anger") {
				if (THIS_OPPONENT.path.length() < 1) {
					THIS_OPPONENT.path = BreadthFirst(THIS_OPPONENT.currentTile, dragon.currentTile)
				}
				else {
					THIS_OPPONENT.target = THIS_OPPONENT.path.pop_back()
					SetOpponentVelocity(THIS_OPPONENT, 2)
				}
			}

			else if (THIS_OPPONENT.emotion == "joy" || THIS_OPPONENT.emotion == "surprise") {
				if (THIS_OPPONENT.path.length() < 1) {
					if (THIS_OPPONENT.emotion == "surprise" && THIS_OPPONENT.pauseCounter > 0) {
						THIS_OPPONENT.pauseCounter--
					}

					THIS_OPPONENT.path = BreadthFirst(THIS_OPPONENT.currentTile, dragon.currentTile)
				}
				else {
					if (THIS_OPPONENT.emotion == "surprise" && THIS_OPPONENT.pauseCounter < 0) {
						THIS_OPPONENT.pauseCounter--
					}

					THIS_OPPONENT.target = THIS_OPPONENT.path.pop_back()
					SetOpponentVelocity(THIS_OPPONENT, 1)
				}
			}

			// Sadness stays still when "hunting."

			else if (THIS_OPPONENT.emotion == "fear") {
				if (THIS_OPPONENT.pauseCounter > 0) {
					THIS_OPPONENT.pauseCounter--
				}
				else {
					if (THIS_OPPONENT.orientation == "north") {
						var newArrow = ArrowFire

						newArrow.type = "arrow"
						newArrow.activeSprite = SPRITE_ARROW_UP
						newArrow.position = [ THIS_OPPONENT.POSITION_VERTICAL, THIS_OPPONENT.POSITION_HORIZONTAL - SQUARE_SIZE ]
						newArrow.currentTile = [ THIS_OPPONENT.TILE_HORIZONTAL, THIS_OPPONENT.TILE_HORIZONTAL - 1 ]
						newArrow.orientation = "north"
						newArrow.horizontalMovement = 0
						newArrow.verticalMovement = -0.4

						hazardList.push_back (newArrow)
						arrowCount++
					}
					else if (THIS_OPPONENT.orientation == "south") {
						var newArrow = ArrowFire

						newArrow.type = "arrow"
						newArrow.activeSprite = SPRITE_ARROW_DOWN
						newArrow.position = [ THIS_OPPONENT.POSITION_VERTICAL, THIS_OPPONENT.POSITION_HORIZONTAL + SQUARE_SIZE ]
						newArrow.currentTile = [ THIS_OPPONENT.TILE_HORIZONTAL, THIS_OPPONENT.TILE_HORIZONTAL + 1 ]
						newArrow.orientation = "south"
						newArrow.horizontalMovement = 0
						newArrow.verticalMovement = 0.4

						hazardList.push_back (newArrow)
						arrowCount++
					}
					else if (THIS_OPPONENT.orientation == "west") {
						var newArrow = ArrowFire

						newArrow.type = "arrow"
						newArrow.activeSprite = SPRITE_ARROW_LEFT
						newArrow.position = [ THIS_OPPONENT.POSITION_VERTICAL - SQUARE_SIZE, THIS_OPPONENT.POSITION_HORIZONTAL ]
						newArrow.currentTile = [ THIS_OPPONENT.TILE_HORIZONTAL - 1, THIS_OPPONENT.TILE_HORIZONTAL ]
						newArrow.orientation = "west"
						newArrow.horizontalMovement = -0.4
						newArrow.verticalMovement = 0

						hazardList.push_back (newArrow)
						arrowCount++
					}
					else if (THIS_OPPONENT.orientation == "east") {
						var newArrow = ArrowFire

						newArrow.type = "arrow"
						newArrow.activeSprite = SPRITE_ARROW_RIGHT
						newArrow.position = [ THIS_OPPONENT.POSITION_VERTICAL + SQUARE_SIZE, THIS_OPPONENT.POSITION_HORIZONTAL ]
						newArrow.currentTile = [ THIS_OPPONENT.TILE_HORIZONTAL + 1, THIS_OPPONENT.TILE_HORIZONTAL ]
						newArrow.orientation = "east"
						newArrow.horizontalMovement = 0.4
						newArrow.verticalMovement = 0

						hazardList.push_back (newArrow)
						arrowCount++
					}
				}
			}

			else if (THIS_OPPONENT.emotion == "disgust") {
				if (THIS_OPPONENT.path.length() < 1) {
					var goal
					var roll = love.math.random( 0, 3 )
					if (roll == 0) {
						goal = [dragon.TILE_VERTICAL - 1, dragon.TILE_HORIZONTAL]
					}
					else if (roll == 1) {
						goal = [dragon.TILE_VERTICAL + 1, dragon.TILE_HORIZONTAL]
					}
					else if (roll == 2) {
						goal = [dragon.TILE_VERTICAL, dragon.TILE_HORIZONTAL - 1]
					}
					else if (roll == 3) {
						goal = [dragon.TILE_VERTICAL, dragon.TILE_HORIZONTAL + 1]
					}

					THIS_OPPONENT.path = BreadthFirst(THIS_OPPONENT.currentTile, goal)
				}
				else {
					THIS_OPPONENT.target = THIS_OPPONENT.path.pop_back()
					SetOpponentVelocity(THIS_OPPONENT, 1)
				}
			}
		}
	}
}


def CollideDragonWithWall() {	
	var dragonVertical = dragon.TILE_VERTICAL
	var dragonHorizontal = dragon.TILE_HORIZONTAL
	
	if (dungeon[dragonVertical][dragonHorizontal - 1] == WALL_CELL && didIHitAWall(dragon, dungeon[dragonVertical][dragonHorizontal - 1]) == true && dragon.horizontalMovement < 0) {
		dragon.horizontalMovement = 0
		var effect = love.sound.newSoundData(EFFECT_BUMP)
		effect.play()
	}
	
	if (dungeon[dragonVertical][dragonHorizontal + 1] == WALL_CELL && didIHitAWall(dragon, dungeon[dragonVertical][dragonHorizontal + 1]) == true && dragon.horizontalMovement > 0) {
		dragon.horizontalMovement = 0
		var effect = love.sound.newSoundData(EFFECT_BUMP)
		effect.play()
	}
	
	if (dungeon[dragonVertical - 1][dragonHorizontal] == WALL_CELL && didIHitAWall(dragon, dungeon[dragonVertical - 1][dragonHorizontal]) == true && dragon.verticalMovement < 0) {
		dragon.verticalMovement = 0
		var effect = love.sound.newSoundData(EFFECT_BUMP)
		effect.play()
	}
	
	if (dungeon[dragonVertical + 1][dragonHorizontal] == WALL_CELL && didIHitAWall(dragon, dungeon[dragonVertical + 1][dragonHorizontal]) == true && dragon.verticalMovement > 0) {
		dragon.verticalMovement = 0
		var effect = love.sound.newSoundData(EFFECT_BUMP)
		effect.play()
	}
}


def StopOpponent(opponent) {
	opponent.horizontalMovement = 0
	opponent.verticalMovement = 0
	opponent.target = []
	opponent.path = []
}


def CollideOpponentWithWall() {
	var opponentHorizontal
	var opponentVertical
	
	for (opponent : opponentList) {
		opponentVertical = THIS_OPPONENT.TILE_VERTICAL
		opponentHorizontal = THIS_OPPONENT.TILE_HORIZONTAL
		
		if (dungeon[opponentVertical][opponentHorizontal - 1] == WALL_CELL && didIHitAWall(THIS_OPPONENT, dungeon[opponentVertical][opponentHorizontal - 1]) == true && THIS_OPPONENT.horizontalMovement < 0) {
			StopOpponent( THIS_OPPONENT )
		}	
		if (dungeon[opponentVertical][opponentHorizontal + 1] == WALL_CELL && didIHitAWall(THIS_OPPONENT, dungeon[opponentVertical][opponentHorizontal + 1]) == true && THIS_OPPONENT.horizontalMovement > 0) {
			StopOpponent( THIS_OPPONENT )
		}	
		if (dungeon[opponentVertical - 1][opponentHorizontal] == WALL_CELL && didIHitAWall(THIS_OPPONENT, dungeon[opponentVertical - 1][opponentHorizontal]) == true && THIS_OPPONENT.verticalMovement < 0) {
			StopOpponent( THIS_OPPONENT )
		}	
		if (dungeon[opponentVertical + 1][opponentHorizontal] == WALL_CELL && didIHitAWall(THIS_OPPONENT, dungeon[opponentVertical + 1][opponentHorizontal]) == true && THIS_OPPONENT.verticalMovement > 0) {
			StopOpponent( THIS_OPPONENT )
		}
	}
}


def CollideOpponentWithDragon() {
	var hasCollided = false
	
	for (opponent : opponentList) {
		if ( DidICollideWithAnActor(THIS_OPPONENT, dragon) == true ) {
			hasCollided = true
			if (THIS_OPPONENT.emotion == "knight") {
				THIS_OPPONENT.sprite = SPRITE_KNIGHT_ATTACK
				var effect = love.sound.newSoundData(EFFECT_SLICE)
				effect.play()
			}
			
			else if (THIS_OPPONENT.emotion == "joy") {
				THIS_OPPONENT.sprite = SPRITE_JOY_ATTACK
				var effect = love.sound.newSoundData(EFFECT_BUMP)
				effect.play()
			}
			
			else if (THIS_OPPONENT.emotion == "sadness") {
				THIS_OPPONENT.sprite = SPRITE_SADNESS_ATTACK
				var effect = love.sound.newSoundData(EFFECT_SLICE)
				effect.play()
			}
			
			else if (THIS_OPPONENT.emotion == "fear") {
				THIS_OPPONENT.sprite = SPRITE_FEAR_ATTACK
				var effect = love.sound.newSoundData(EFFECT_PIERCE)
				effect.play()
			}
			
			else if (THIS_OPPONENT.emotion == "anger") {
				THIS_OPPONENT.sprite = SPRITE_ANGER_ATTACK
				var effect = love.sound.newSoundData(EFFECT_SLICE)
				effect.play()
			}
			
			else if (THIS_OPPONENT.emotion == "surprise") {
				THIS_OPPONENT.sprite = SPRITE_SURPRISE_ATTACK
				var effect = love.sound.newSoundData(EFFECT_EXPLODE)
				effect.play()
			}
			
			else if (THIS_OPPONENT.emotion == "disgust") {
				if (dragon.POSITION_VERTICAL < THIS_OPPONENT.POSITION_VERTICAL || dragon.POSITION_VERTICAL > THIS_OPPONENT.POSITION_VERTICAL) {
					THIS_OPPONENT.sprite = SPRITE_DISGUST_ATTACK_VERTICAL
				}
				else {
					THIS_OPPONENT.sprite = SPRITE_DISGUST_ATTACK_HORIZONTAL
				}
				var effect = love.sound.newSoundData(EFFECT_PIERCE)
				effect.play()
			}
			
			break
		}
	}
	
	if (hasCollided == true) {
		FailDragon()
	}
}


def CollideOpponentWithOpponent() {
	for (permanent = 0; permanent < opponentList.length() - 1; ++permanent) {
		for (temporary = permanent + 1; temporary < opponentList.length(); ++temporary) {
			if ( DidICollideWithAnActor(opponentList[permanent], opponentList[temporary]) == true ) {
				StopOpponent( THIS_OPPONENT )
			}
		}
	}
}


def CollideArrowFireWithWall() {
	var hazardHorizontal
	var hazardVertical
	
	for (hazard : hazardList) {
		hazardVertical = THIS_HAZARD.TILE_VERTICAL
		hazardHorizontal = THIS_HAZARD.TILE_HORIZONTAL
		
		if (THIS_HAZARD.type != "dynamite") {
			if (dungeon[hazardVertical][hazardHorizontal - 1] == WALL_CELL && didIHitAWall(THIS_HAZARD, dungeon[hazardVertical][hazardHorizontal - 1]) == true && THIS_HAZARD.horizontalMovement < 0) {
				EraseHazard(hazard)
			}	
			if (dungeon[hazardVertical][hazardHorizontal + 1] == WALL_CELL && didIHitAWall(THIS_HAZARD, dungeon[hazardVertical][hazardHorizontal + 1]) == true && THIS_HAZARD.horizontalMovement > 0) {
				EraseHazard(hazard)
			}	
			if (dungeon[hazardVertical - 1][hazardHorizontal] == WALL_CELL && didIHitAWall(THIS_HAZARD, dungeon[hazardVertical - 1][hazardHorizontal]) == true && THIS_HAZARD.verticalMovement < 0) {
				EraseHazard(hazard)
			}	
			if (dungeon[hazardVertical + 1][hazardHorizontal] == WALL_CELL && didIHitAWall(THIS_HAZARD, dungeon[hazardVertical + 1][hazardHorizontal]) == true && THIS_HAZARD.verticalMovement > 0) {
				EraseHazard(hazard)
			}
		}
	}
}


def CollideArrowFireWithHazard() {
	if (hazardList.length() > 1) {
		for (first = 0; first < hazardList.length() - 1; ++first) {
			if (hazardList[first].type != "dynamite") {
				for (second = first + 1; second < hazardList.length(); ++second) {
					if ( DidICollideWithAnActor(first, second) == true ) {
						if (hazardList[second].type == "dynamite") {
							hazardList[second].explosionCount = DYNAMITE_EXPLOSION_POINT
							hazardList[first] = hazardList[hazardList.length() - 1]
							hazardList.pop_back()
						}
						else {
							if (hazardList[first].type == "arrow") {
								var effect = love.sound.newSoundData(EFFECT_PIERCE)
							}
							else if (hazardList[second].type == "fire") {
								var effect = love.sound.newSoundData(EFFECT_FIRE_HIT)
							}
						
							hazardList[first] = hazardList[hazardList.length() - 1]
							hazardList[second] = hazardList[hazardList.length()]
							//Get rid of 2 hazards by popping twice.
							hazardList.pop_back()
							hazardList.pop_back()
							
							effect.play()
							break
						}
					}
				}
			}
		}
	}
}


def CollideHazardWithDragon() {
	for (current : hazardList) {
		if ( DidICollideWithAnActor(THIS_HAZARD, dragon) == true ) {
			if (THIS_HAZARD.type == "dynamite") {
				if (THIS_HAZARD.explosionCount < 1) {
					FailDragon()
				}
			}
			else if (THIS_HAZARD.type == "arrow") {
				var effect = love.sound.newSoundData(EFFECT_PIERCE)
				effect.play()
				EraseHazard(hazard)
				FailDragon()
			}
			else if (THIS_HAZARD.type == "fire") {
				var effect = love.sound.newSoundData(EFFECT_BUMP)
				effect.play()
				EraseHazard(hazard)
			}
		}
	}
}


def CollideHazardWithOpponent() {
	for (hazard : hazardList) {
		for (opponent : opponentList) {
			if ( DidICollideWithAnActor(THIS_HAZARD, THIS_OPPONENT) == true) {
				if (THIS_OPPONENT.emotion == "knight") {
					if (THIS_HAZARD.type != "dynamite") {
						EraseHazard(hazard)
					}
					
					var effect = love.sound.newSoundData(EFFECT_BLOCKED_FIRE)
					effect.play()
				}
				
				else {
					if (THIS_HAZARD.type == "dynamite") {
						if (THIS_HAZARD.explosionCount < 1) {
							HurtOpponent(THIS_OPPONENT)
						}
					}
					else {
						if (THIS_HAZARD.type == "arrow") {
							var effect = love.sound.newSoundData(EFFECT_PIERCE)
						}
						else if (THIS_HAZARD.type == "fire") {
							var effect = love.sound.newSoundData(EFFECT_BUMP)
						}
						
						effect.play()
						EraseHazard(hazard)
						HurtOpponent(THIS_OPPONENT)
					}
				}
			}
		}
	}
}


def CollideDragonWithTreasure() {
	if ( DidIHitAWall(dragon, dungeon[currentDungeonLength - 2, currentDungeonLength - 2] && gotTreasure == false) {
		gotTreasure = true
		var effect = love.sound.newSoundData(EFFECT_GOT_TREASURE)
		effect.play()
	}
}

def CollideDragonWithDoor() {
	if ( DidIHitAWall(dragon, dungeon[0][2]) == true && gotTreasure == true) {
		StopEveryone()
		
		currentMusic = false
		currentMusic.play()
		
		for (position = 1; position < 18; ++position) {
			dragon.POSITION_VERTICAL--
		}
		
		currentMusic = love.sound.newSoundData(MUSIC_SUCCESS)
		currentMusic.play()
		
		Cleanup()
		
		intermissionPhase = true
	}
}


def CheckAllCollisions() {
	CollideDragonWithWall()
	CollideOpponentWithWall()
	CollideOpponentWithDragon()
	CollideOpponentWithOpponent()
	CollideArrowFireWithWall()
	CollideArrowFireWithHazard()
	CollideHazardWithDragon()
	CollideHazardWithOpponent()
	CollideDragonWithTreasure()
	CollideDragonWithDoor()
}


def StopEveryone() {
	dragon.horizontalMovement = 0
	dragon.verticalMovement = 0
	
	for (opponent : opponentList) {
		StopOpponent( THIS_OPPONENT )
	}
	
	for (hazard : hazardList) {
		if (THIS_HAZARD.type == "dynamite") {
			if (THIS_HAZARD.explosionCount < 1) {
				THIS_HAZARD.explosionCount = DYNAMITE_ERASURE_POINT
			}
			else {
				THIS_HAZARD.explosionCount = 999
				/* By the time explosionCount counts down to 0,
				anything that required everyone to stop
				 would have already been accomplished. */
			}
		}
		else {
			THIS_HAZARD.horizontalMovement = 0
			THIS_HAZARD.verticalMovement = 0
		}
	}
}


def MoveActor(character) {
	character.POSITION_HORIZONTAL = character.POSITION_HORIZONTAL + character.horizontalMovement
	character.POSITION_VERTICAL = character.POSITION_VERTICAL + character.horizontalMovement
}


def MotionSystem() {
	MoveActor(dragon)
	for (opponent : opponentList) {
		MoveActor( opponentList[opponent] )
	}
	for (hazard : hazardList) {
		MoveActor( hazardList[hazard] )
	}
}


def FailDragon() {

}


def SucceedDragon() {

}


def LostGame() {
	normal_phase = false
	panic_phase = false
	love.graphics.clear()
	love.graphics.print(message_gameOver, 50, 42)
	love.graphics.print(message_finalRound, 48, 84)
	love.graphics.print(message_pressA, 50, 96)
	currentMusic = love.sound.newSoundData(MUSIC_GAMEOVER)
	currentMusic.play()
	
	if ( love.joystick[0].isDown("A") ) {
		love.graphics.clear()
		title_phase = true
		TitleRun()
	}
}



/* basic ChaiLove stuff */

def load() {
	MUSIC_TITLE.setLooping(true)
	MUSIC_GAMEPLAY_NOINTRO.setLooping(true)
	MUSIC_PANIC.setLooping(true)
	MUSIC_TITLE.setLooping(true)
	EFFECT_RETREAT.setLooping(true)
}

def draw() {
	love.graphics.print("The code still works!", 100, 100)
}

def update(dt) {

}
